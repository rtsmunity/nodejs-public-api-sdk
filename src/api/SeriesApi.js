/**
 * PULL API
 * REST api for static sport data.  Every resource is protected by an **API key** which must be placed in X-Api-Key reques header:          X-Api-Key: your_api_key  and every request has to be made with client certificate.  
 *
 * OpenAPI spec version: 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse20015', 'model/InlineResponse20016', 'model/InlineResponse20017'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse20015'), require('../model/InlineResponse20016'), require('../model/InlineResponse20017'));
  } else {
    // Browser globals (root is window)
    if (!root.RtsmunityPublicApiSdk) {
      root.RtsmunityPublicApiSdk = {};
    }
    root.RtsmunityPublicApiSdk.SeriesApi = factory(root.RtsmunityPublicApiSdk.ApiClient, root.RtsmunityPublicApiSdk.InlineResponse20015, root.RtsmunityPublicApiSdk.InlineResponse20016, root.RtsmunityPublicApiSdk.InlineResponse20017);
  }
}(this, function(ApiClient, InlineResponse20015, InlineResponse20016, InlineResponse20017) {
  'use strict';

  /**
   * Series service.
   * @module api/SeriesApi
   * @version 1.0.0
   */

  /**
   * Constructs a new SeriesApi. 
   * @alias module:api/SeriesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getSeries operation.
     * @callback module:api/SeriesApi~getSeriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse20015>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List All Series for tournament
     * 
     * @param {String} sport Sport key
     * @param {Object} opts Optional parameters
     * @param {Number} opts.tournamentId ID of the tournament in the form of an integer
     * @param {module:api/SeriesApi~getSeriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse20015>}
     */
    this.getSeries = function(sport, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'sport' is set
      if (sport == undefined || sport == null) {
        throw "Missing the required parameter 'sport' when calling getSeries";
      }


      var pathParams = {
        'sport': sport
      };
      var queryParams = {
        'tournament_id': opts['tournamentId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = [InlineResponse20015];

      return this.apiClient.callApi(
        '/{sport}/series', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSeriesState operation.
     * @callback module:api/SeriesApi~getSeriesStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20016} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get concrete Series state
     * 
     * @param {Number} id ID of the state in the form of an integer
     * @param {String} sport Sport key
     * @param {module:api/SeriesApi~getSeriesStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20016}
     */
    this.getSeriesState = function(id, sport, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getSeriesState";
      }

      // verify the required parameter 'sport' is set
      if (sport == undefined || sport == null) {
        throw "Missing the required parameter 'sport' when calling getSeriesState";
      }


      var pathParams = {
        'id': id,
        'sport': sport
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = InlineResponse20016;

      return this.apiClient.callApi(
        '/{sport}/series/states/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSeriesStates operation.
     * @callback module:api/SeriesApi~getSeriesStatesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse20016>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List All Series states
     * 
     * @param {String} sport Sport key
     * @param {module:api/SeriesApi~getSeriesStatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse20016>}
     */
    this.getSeriesStates = function(sport, callback) {
      var postBody = null;

      // verify the required parameter 'sport' is set
      if (sport == undefined || sport == null) {
        throw "Missing the required parameter 'sport' when calling getSeriesStates";
      }


      var pathParams = {
        'sport': sport
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = [InlineResponse20016];

      return this.apiClient.callApi(
        '/{sport}/series/states', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSeriesTypes operation.
     * @callback module:api/SeriesApi~getSeriesTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse20017>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List All Series types
     * 
     * @param {String} sport Sport key
     * @param {module:api/SeriesApi~getSeriesTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse20017>}
     */
    this.getSeriesTypes = function(sport, callback) {
      var postBody = null;

      // verify the required parameter 'sport' is set
      if (sport == undefined || sport == null) {
        throw "Missing the required parameter 'sport' when calling getSeriesTypes";
      }


      var pathParams = {
        'sport': sport
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = [InlineResponse20017];

      return this.apiClient.callApi(
        '/{sport}/series/types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
